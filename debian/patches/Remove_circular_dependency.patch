To avoid a circular dependency, I copied verbatim from
github.com/prometheus/prometheus/utility/test the test_util.go file.
The file has the same authors, copyright and license as the rest of the code.

--- a/extraction/processor0_0_1_test.go
+++ b/extraction/processor0_0_1_test.go
@@ -20,8 +20,6 @@
 	"sort"
 	"testing"
 
-	"github.com/prometheus/prometheus/utility/test"
-
 	"github.com/prometheus/client_golang/model"
 )
 
@@ -47,7 +45,7 @@
 	options := &ProcessOptions{
 		Timestamp: test001Time,
 	}
-	if err := Processor001.ProcessSingle(reader, s, options); !test.ErrorEqual(s.err, err) {
+	if err := Processor001.ProcessSingle(reader, s, options); !ErrorEqual(s.err, err) {
 		t.Fatalf("%d. expected err of %s, got %s", set, s.err, err)
 	}
 
--- a/extraction/processor0_0_2_test.go
+++ b/extraction/processor0_0_2_test.go
@@ -23,8 +23,6 @@
 	"sort"
 	"testing"
 
-	"github.com/prometheus/prometheus/utility/test"
-
 	"github.com/prometheus/client_golang/model"
 )
 
@@ -50,7 +48,7 @@
 	options := &ProcessOptions{
 		Timestamp: test002Time,
 	}
-	if err := Processor002.ProcessSingle(reader, s, options); !test.ErrorEqual(s.err, err) {
+	if err := Processor002.ProcessSingle(reader, s, options); !ErrorEqual(s.err, err) {
 		t.Fatalf("%d. expected err of %s, got %s", set, s.err, err)
 	}
 
--- /dev/null
+++ b/extraction/test_util.go
@@ -0,0 +1,31 @@
+// Copyright 2013 The Prometheus Authors
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+// http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+package extraction
+
+// ErrorEqual compares Go errors for equality.
+func ErrorEqual(left, right error) bool {
+	if left == right {
+		return true
+	}
+
+	if left != nil && right != nil {
+		if left.Error() == right.Error() {
+			return true
+		}
+
+		return false
+	}
+
+	return false
+}
